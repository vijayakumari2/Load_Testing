name: Postman to K6 Conversion and Load Testing

on:
  push:
    # branches:
    #   # - main
  workflow_dispatch:
    inputs:
      duration:
        description: "Duration for the load test (e.g., 1m, 10m)"
        required: true
        default: "1m"
      users:
        description: "Number of virtual users"
        required: true
        default: "10"

jobs:
  # Job to convert Postman collection to K6 script
  convert-to-k6:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18

      - name: Install Postman-to-K6 Converter
        run: npm install -g postman-to-k6

      - name: Convert Postman Collection to K6 Script
        run: |
          postman-to-k6 ./.postman/collection/Memcrypt_qa_performance.postman_collection.json \
            -e ./.postman/env/memcrypt_qa.postman_environment.json \
            -o ./grafana/scripts/k6script.js

      # - name: Add stages configuration to K6 script
      #   run: |
      #     SCRIPT_FILE="./grafana/scripts/k6script.js"
      #     CONFIG_FILE="./grafana/config/stages.js"
      #     CONFIG_CONTENT=$(cat ${CONFIG_FILE} | sed 's/[&/\]/\\&/g')
      #     CONFIG_CONTENT=$(echo "${CONFIG_CONTENT}" | tr -d '\n')
      #     sed -i "s/export let options = { maxRedirects: 4 };/export let options = ${CONFIG_CONTENT}/" ${SCRIPT_FILE}

      - name: Inject Dynamic Load Configuration
        run: |
          SCRIPT_FILE="./grafana/scripts/k6script.js"
          DURATION="${{ inputs.duration }}"
          USERS="${{ inputs.users }}"
          sed -i "s/export let options = {.*};/export let options = { stages: [{ duration: '${DURATION}', target: ${USERS} }] };/g" ${SCRIPT_FILE}

          # Add the dynamic configuration into the script
          # sed -i "1s/^/export let options = { stages: [{ duration: '${DURATION}', target: ${USERS} }] };\n/" ${SCRIPT_FILE}


      - name: Set up Docker
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            ca-certificates \
            curl \
            gnupg \
            lsb-release
          curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg
          echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
          sudo apt-get update
          sudo apt-get install -y docker-ce docker-ce-cli containerd.io

      - name: Install Docker Compose
        run: |
          sudo curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose
          docker-compose --version

      - name: List contents of /scripts to verify file mounting
        run: ls -l ./grafana/scripts

      - name: Run K6 Load Test
        run: |
          docker-compose -f ./grafana/docker-compose.yml up -d
          docker-compose -f ./grafana/docker-compose.yml logs -f k6
          
      - name: Shutdown Docker Compose
        run: |
          docker-compose -f ./grafana/docker-compose.yml down -v
